import React, { useState, useRef, useEffect } from 'react';
import { GoogleGenerativeAI } from '@google/generative-ai';
import './App.css';

function App() {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey] = useState(process.env.REACT_APP_GEMINI_API_KEY || '');
  const [selectedModel, setSelectedModel] = useState('gemini-1.5-flash');
  const [systemPrompt, setSystemPrompt] = useState('–í—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.');
  const [useSystemPrompt, setUseSystemPrompt] = useState(true);
  const messagesEndRef = useRef(null);
  const [availableModels, setAvailableModels] = useState([]);
  const [modelsLoaded, setModelsLoaded] = useState(false);
  const [modelsError, setModelsError] = useState('');

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –í—ã–±–æ—Ä –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∏–∑ API
  const pickBestModel = (modelsList) => {
    const names = modelsList.map(m => m);
    // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º 1.5-pro, –∑–∞—Ç–µ–º 1.5-flash, –∑–∞—Ç–µ–º gemini-pro
    const preferredOrder = [
      'gemini-1.5-pro',
      'gemini-1.5-pro-latest',
      'gemini-1.5-flash',
      'gemini-1.5-flash-latest',
      'gemini-pro'
    ];
    for (const pref of preferredOrder) {
      if (names.some(n => n === pref)) return pref;
      // —Ç–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ ListModels, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ models/NAME
      if (names.some(n => n.endsWith('/' + pref))) return pref;
    }
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—Ç ‚Äî –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
    if (names.length > 0) {
      const first = names[0];
      return first.includes('/') ? first.split('/').pop() : first;
    }
    return 'gemini-pro';
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (ListModels)
  useEffect(() => {
    const loadModels = async () => {
      if (!apiKey.trim()) return;
      try {
        setModelsLoaded(false);
        setModelsError('');
        const resp = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`);
        if (!resp.ok) {
          throw new Error(`ListModels HTTP ${resp.status}`);
        }
        const json = await resp.json();
        const models = (json.models || [])
          .filter(m => Array.isArray(m.supportedGenerationMethods) && m.supportedGenerationMethods.includes('generateContent'))
          .map(m => m.name); // –∏–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ models/<name>
        setAvailableModels(models);
        setModelsLoaded(true);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        const flatNames = models.map(n => n.includes('/') ? n.split('/').pop() : n);
        const selectedFlat = selectedModel;
        if (!flatNames.includes(selectedFlat)) {
          const best = pickBestModel(models);
          if (best && best !== selectedModel) {
            setSelectedModel(best);
          }
        }
      } catch (e) {
        console.error('ListModels error:', e);
        setModelsError(e.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
        setModelsLoaded(true);
      }
    };

    loadModels();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞
  }, [apiKey, selectedModel]);

  const sendMessage = async () => {
    if (!inputValue.trim() || isLoading || !apiKey.trim()) return;

    const userMessage = { role: 'user', content: inputValue, timestamp: new Date() };
    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputValue;
    setInputValue('');
    setIsLoading(true);

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini AI
      const genAI = new GoogleGenerativeAI(apiKey);

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –¥–∞–Ω–Ω—ã–º ListModels ‚Äî –≤—ã–±–µ—Ä–µ–º –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
      let modelNameToUse = selectedModel;
      if (availableModels.length > 0) {
        const flatNames = availableModels.map(n => n.includes('/') ? n.split('/').pop() : n);
        if (!flatNames.includes(modelNameToUse)) {
          modelNameToUse = pickBestModel(availableModels);
        }
      }

      let model = genAI.getGenerativeModel({ model: modelNameToUse });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —á–∞—Ç–∞
      let prompt = '';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
      if (useSystemPrompt && systemPrompt.trim()) {
        prompt += `–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${systemPrompt}\n\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
      const recentMessages = messages.slice(-10).filter(msg => msg.role !== 'error');
      recentMessages.forEach(msg => {
        const roleLabel = msg.role === 'assistant' ? 'AI' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        prompt += `${roleLabel}: ${msg.content}\n`;
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      prompt += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentInput}\nAI: `;

      let result;
      try {
        result = await model.generateContent(prompt);
      } catch (err) {
        // –ï—Å–ª–∏ 404 –ø–æ –º–æ–¥–µ–ª–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
        const isNotFound = (err && (String(err.message || err).includes('404') || String(err.message || err).includes('not found')));
        if (isNotFound && availableModels.length > 0) {
          const fallback = pickBestModel(availableModels);
          if (fallback && fallback !== modelNameToUse) {
            modelNameToUse = fallback;
            setSelectedModel(fallback);
            model = genAI.getGenerativeModel({ model: modelNameToUse });
            result = await model.generateContent(prompt);
          } else {
            throw err;
          }
        } else {
          throw err;
        }
      }
      const response = await result.response;
      const text = response.text();

      const aiMessage = { 
        role: 'assistant', 
        content: text, 
        timestamp: new Date(),
        stats: {
          model: selectedModel,
          promptTokens: response.usageMetadata?.promptTokenCount || 0,
          responseTokens: response.usageMetadata?.candidatesTokenCount || 0,
          totalTokens: response.usageMetadata?.totalTokenCount || 0
        }
      };
      
      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      const errorMessage = { 
        role: 'error', 
        content: `–û—à–∏–±–∫–∞ Gemini API: ${error.message}`, 
        timestamp: new Date() 
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const clearChat = () => {
    setMessages([]);
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
      console.log('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
    });
  };

  return (
    <div className="App">
      <header className="app-header">
        <h1>ü§ñ Gemini Chat</h1>
        <div className="server-config">
          <label>
            –ú–æ–¥–µ–ª—å: 
            <select 
              value={selectedModel} 
              onChange={(e) => setSelectedModel(e.target.value)}
            >
              {availableModels.length > 0 ? (
                availableModels.map((m) => {
                  const short = m.includes('/') ? m.split('/').pop() : m;
                  return (
                    <option key={m} value={short}>{short}</option>
                  );
                })
              ) : (
                <>
                  <option value="gemini-1.5-pro">gemini-1.5-pro</option>
                  <option value="gemini-1.5-flash">gemini-1.5-flash</option>
                  <option value="gemini-pro">gemini-pro</option>
                </>
              )}
            </select>
          </label>
          {!modelsLoaded && apiKey.trim() && (
            <div className="models-warning">–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π‚Ä¶</div>
          )}
          {modelsError && (
            <div className="models-error">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {modelsError}</div>
          )}
          <label className="system-prompt-toggle">
            <input 
              type="checkbox" 
              checked={useSystemPrompt}
              onChange={(e) => setUseSystemPrompt(e.target.checked)}
            />
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
          </label>
          <button onClick={clearChat} className="clear-btn">
            –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
          </button>
        </div>
        
        {useSystemPrompt && (
          <div className="system-prompt-config">
            <label>
              –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI):
              <textarea
                value={systemPrompt}
                onChange={(e) => setSystemPrompt(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è AI –º–æ–¥–µ–ª–∏..."
                rows="3"
                className="system-prompt-textarea"
              />
            </label>
            <div className="system-prompt-info">
              üí° –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç AI –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ä–æ–ª—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
            </div>
          </div>
        )}
      </header>

      <main className="chat-container">
        <div className="messages">
          {messages.length === 0 && (
            <div className="welcome-message">
              <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini Chat!</h2>
              <p>
                {apiKey.trim() 
                  ? (useSystemPrompt 
                      ? 'Google Gemini –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º' 
                      : 'Google Gemini –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!')
                  : '‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'}
              </p>
              {apiKey.trim() && useSystemPrompt && (
                <div className="system-prompt-status active">
                  ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∞–∫—Ç–∏–≤–µ–Ω
                </div>
              )}
              {apiKey.trim() && !useSystemPrompt && (
                <div className="system-prompt-status inactive">
                  ‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç–∫–ª—é—á–µ–Ω - AI —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                </div>
              )}
              {apiKey.trim() && (
                <div className="example-prompts">
                  <button onClick={() => setInputValue('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?')}>
                    –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?
                  </button>
                  <button onClick={() => setInputValue('–ü–æ–º–æ–≥–∏ –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ Python')}>
                    –ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ Python
                  </button>
                  <button onClick={() => setInputValue('–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏')}>
                    –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç–æ
                  </button>
                </div>
              )}
              {!apiKey.trim() && (
                <div className="api-key-help">
                  <p>üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞:</p>
                  <ol>
                    <li>–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ <a href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer">Google AI Studio</a></li>
                    <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.env</code> –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞</li>
                    <li>–î–æ–±–∞–≤—å—Ç–µ: <code>REACT_APP_GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á</code></li>
                    <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</li>
                  </ol>
                  <p>üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç: 15 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω, 1500 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å</p>
                </div>
              )}
            </div>
          )}

          {messages.map((message, index) => (
            <div key={index} className={`message ${message.role}`}>
              <div className="message-header">
                <span className="role">
                  {message.role === 'user' ? 'üë§ –í—ã' : 
                   message.role === 'assistant' ? 'ü§ñ AI' : '‚ùå –û—à–∏–±–∫–∞'}
                </span>
                <div className="message-actions">
                  <span className="timestamp">{formatTime(message.timestamp)}</span>
                  {message.role === 'assistant' && (
                    <button 
                      className="copy-btn" 
                      onClick={() => copyToClipboard(message.content)}
                      title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
                    >
                      üìã
                    </button>
                  )}
                </div>
              </div>
              <div className="message-content">
                {message.content}
              </div>
              {message.stats && (
                <div className="message-stats">
                  ü§ñ {message.stats.model} | 
                  üìù {message.stats.totalTokens} —Ç–æ–∫–µ–Ω–æ–≤ 
                  ({message.stats.promptTokens} –≤—Ö–æ–¥ + {message.stats.responseTokens} –æ—Ç–≤–µ—Ç)
                </div>
              )}
            </div>
          ))}

          {isLoading && (
            <div className="message assistant loading">
              <div className="message-header">
                <span className="role">ü§ñ AI </span>
                <span className="timestamp">–ø–µ—á–∞—Ç–∞–µ—Ç...</span>
              </div>
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        <div className="input-container">
          <textarea
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏)"
            disabled={isLoading}
            rows="3"
          />
          <button 
            onClick={sendMessage} 
            disabled={!inputValue.trim() || isLoading || !apiKey.trim()}
            className="send-btn"
            title={!apiKey.trim() ? '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á –≤ .env' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}
          >
            {isLoading ? '‚è≥' : 'üì§'}
          </button>
        </div>
      </main>
    </div>
  );
}

export default App;